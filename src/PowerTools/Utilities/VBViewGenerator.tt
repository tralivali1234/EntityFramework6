'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.CodeDom.Compiler
Imports System.Data.Entity.Core.Metadata.Edm
Imports System.Data.Entity.Infrastructure.MappingViews

<Assembly: DbMappingViewCacheTypeAttribute(
    GetType(<#= ContextTypeName #>),
    GetType(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets<#= MappingHashValue #>))>

Namespace Edm_EntityMappingGeneratedViews

    ''' <summary>
    ''' Implements a mapping view cache.
    ''' </summary>
    <GeneratedCode("Entity Framework 6 Power Tools", "0.9.2.0")>
    Friend NotInheritable Class ViewsForBaseEntitySets<#= MappingHashValue #>
        Inherits DbMappingViewCache

        ''' <summary>
        ''' Gets a hash value computed over the mapping closure.
        ''' </summary>
        Public Overrides ReadOnly Property MappingHashValue As String
            Get
                Return "<#= MappingHashValue #>"
            End Get
        End Property

        ''' <summary>
        ''' Gets a view corresponding to the specified extent.
        ''' </summary>
        ''' <param name="extent">The extent.</param>
        ''' <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        Public Overrides Function GetView(extent As EntitySetBase) As DbMappingView
            If extent Is Nothing Then
                Throw New ArgumentNullException("extent")
            End If

            Dim extentName = extent.EntityContainer.Name & "." & extent.Name
<#
    var index = 0;
    foreach (var view in Views)
    {
#>

            If extentName = "<#= view.Key.EntityContainer.Name + "." + view.Key.Name #>" Then
                Return GetView<#= index #>()
            End If
<#
        index++;
    }
#>

            Return Nothing
        End Function
<#
    index = 0;
    foreach (var view in Views)
    {
        var entitySql = string.Join(
            "\" & vbCrLf &\r\n                \"",
            view.Value.EntitySql.Split(new[] { Environment.NewLine }, StringSplitOptions.None));
#>

        ''' <summary>
        ''' Gets the view for <#= view.Key.EntityContainer.Name + "." + view.Key.Name #>.
        ''' </summary>
        ''' <returns>The mapping view.</returns>
        Private Shared Function GetView<#= index #>() As DbMappingView
            Return New DbMappingView(
                "<#= entitySql #>")
        End Function
<#
        index++;
    }
#>
    End Class
End Namespace
<#+
    public string ContextTypeName { get; set; }
    public string MappingHashValue { get; set; }
    public dynamic Views { get; set; }
#>